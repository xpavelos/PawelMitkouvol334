//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Contents/Input/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TKOU.SimAI.Input
{
    public partial class @GameInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""3cc6bd13-f076-437f-82dc-8c8976829b90"",
            ""actions"": [
                {
                    ""name"": ""MoveMouse"",
                    ""type"": ""Value"",
                    ""id"": ""c3a0332d-c448-42d2-8424-b67e57213d31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""34bf5df7-8cbe-44a3-bedf-b80f4859b59d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""17376096-1312-4989-95e2-0aabac2c3d71"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""366ea1de-8a6a-49b7-b18e-fc64bbaaa7a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Context"",
                    ""type"": ""Button"",
                    ""id"": ""d6817b7b-ad41-4469-9338-7454ebff7866"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""14c61820-8b69-46d9-9126-c9151781f1f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04bfefcc-6062-4930-bc2a-f549baae1e4b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7dac099-71f4-419a-b193-db3a85fcb138"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3dcb4f9-6798-4e14-8a4b-294a760a7746"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef3e71db-811a-4b4b-bcac-218ab13e0d6f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Context"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d3c2e14-5078-4eff-9fc9-b6ed3c2315ff"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4abdb6c-699d-4b7e-9f60-4949ce6c9195"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Main
            m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
            m_Main_MoveMouse = m_Main.FindAction("MoveMouse", throwIfNotFound: true);
            m_Main_MoveCamera = m_Main.FindAction("MoveCamera", throwIfNotFound: true);
            m_Main_ZoomCamera = m_Main.FindAction("ZoomCamera", throwIfNotFound: true);
            m_Main_Select = m_Main.FindAction("Select", throwIfNotFound: true);
            m_Main_Context = m_Main.FindAction("Context", throwIfNotFound: true);
            m_Main_Return = m_Main.FindAction("Return", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Main
        private readonly InputActionMap m_Main;
        private IMainActions m_MainActionsCallbackInterface;
        private readonly InputAction m_Main_MoveMouse;
        private readonly InputAction m_Main_MoveCamera;
        private readonly InputAction m_Main_ZoomCamera;
        private readonly InputAction m_Main_Select;
        private readonly InputAction m_Main_Context;
        private readonly InputAction m_Main_Return;
        public struct MainActions
        {
            private @GameInputActions m_Wrapper;
            public MainActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveMouse => m_Wrapper.m_Main_MoveMouse;
            public InputAction @MoveCamera => m_Wrapper.m_Main_MoveCamera;
            public InputAction @ZoomCamera => m_Wrapper.m_Main_ZoomCamera;
            public InputAction @Select => m_Wrapper.m_Main_Select;
            public InputAction @Context => m_Wrapper.m_Main_Context;
            public InputAction @Return => m_Wrapper.m_Main_Return;
            public InputActionMap Get() { return m_Wrapper.m_Main; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
            public void SetCallbacks(IMainActions instance)
            {
                if (m_Wrapper.m_MainActionsCallbackInterface != null)
                {
                    @MoveMouse.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveMouse;
                    @MoveMouse.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveMouse;
                    @MoveMouse.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveMouse;
                    @MoveCamera.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveCamera;
                    @MoveCamera.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveCamera;
                    @MoveCamera.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMoveCamera;
                    @ZoomCamera.started -= m_Wrapper.m_MainActionsCallbackInterface.OnZoomCamera;
                    @ZoomCamera.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnZoomCamera;
                    @ZoomCamera.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnZoomCamera;
                    @Select.started -= m_Wrapper.m_MainActionsCallbackInterface.OnSelect;
                    @Select.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnSelect;
                    @Select.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnSelect;
                    @Context.started -= m_Wrapper.m_MainActionsCallbackInterface.OnContext;
                    @Context.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnContext;
                    @Context.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnContext;
                    @Return.started -= m_Wrapper.m_MainActionsCallbackInterface.OnReturn;
                    @Return.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnReturn;
                    @Return.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnReturn;
                }
                m_Wrapper.m_MainActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveMouse.started += instance.OnMoveMouse;
                    @MoveMouse.performed += instance.OnMoveMouse;
                    @MoveMouse.canceled += instance.OnMoveMouse;
                    @MoveCamera.started += instance.OnMoveCamera;
                    @MoveCamera.performed += instance.OnMoveCamera;
                    @MoveCamera.canceled += instance.OnMoveCamera;
                    @ZoomCamera.started += instance.OnZoomCamera;
                    @ZoomCamera.performed += instance.OnZoomCamera;
                    @ZoomCamera.canceled += instance.OnZoomCamera;
                    @Select.started += instance.OnSelect;
                    @Select.performed += instance.OnSelect;
                    @Select.canceled += instance.OnSelect;
                    @Context.started += instance.OnContext;
                    @Context.performed += instance.OnContext;
                    @Context.canceled += instance.OnContext;
                    @Return.started += instance.OnReturn;
                    @Return.performed += instance.OnReturn;
                    @Return.canceled += instance.OnReturn;
                }
            }
        }
        public MainActions @Main => new MainActions(this);
        public interface IMainActions
        {
            void OnMoveMouse(InputAction.CallbackContext context);
            void OnMoveCamera(InputAction.CallbackContext context);
            void OnZoomCamera(InputAction.CallbackContext context);
            void OnSelect(InputAction.CallbackContext context);
            void OnContext(InputAction.CallbackContext context);
            void OnReturn(InputAction.CallbackContext context);
        }
    }
}
